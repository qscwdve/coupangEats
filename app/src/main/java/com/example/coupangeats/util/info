SharedPreferenced 에 저장된 유저 정보
userIdx : Int  -> 이 정보를 보고 자동 로그인! -1이면 로그아웃된 상태, 그 외의 번호면 자동로그인 가능
email : String  -> 유저 이메일
password : String  -> 유저 패스워드
ApplicationClass.X_ACCESS_TOKEN : String  -> 유저 인증을 위한 jwt, 로그인 할때마다 값이 달라진다
phone : String  ->  핸드폰 번호  , 보류..

자동로그인
- MainActivity 의 updateLogin()

sSharedPrefereced 에 저장된 gps Permission 정보
gps : Boolean  -> true : gps 사용 가능 , false : gps 사용 불가능

userMainAddressIdx

userAddressIdx

/*// 자동 로그인
    private fun updateLogin() {
        val shared = ApplicationClass.sSharedPreferences

        // jwt 초기화
        val edit = shared.edit()
        edit.putString(ApplicationClass.X_ACCESS_TOKEN, null).apply()
        val userId = shared.getInt("userIdx", -1)
        if(userId != -1) {
            val email = shared.getString("email", "") ?: ""
            val password = shared.getString("password", "") ?: ""
            if(email != "" && password != ""){
                // 자동 로그인 할 수 있음 -> 서버에 로그인 시도
                showCustomToast("자동 로그인 시도")
                val userLoginRequest = UserLoginRequest(email, password)
                HomeService(this).tryPostLogin(userLoginRequest)
            } else {
                edit.putInt("userIdx", -1)
                edit.putString(ApplicationClass.X_ACCESS_TOKEN, null)
                edit.apply()
            }
        }
    }

    fun loginSuccess(jwt: String, userIdx: Int, email: String = "", password: String = ""){
        val edit = ApplicationClass.sSharedPreferences.edit()
        if(email != "" && password != ""){
            edit.putString("email", email)
            edit.putString("password", password)
        }
        edit.putString(ApplicationClass.X_ACCESS_TOKEN, jwt)
        edit.putInt("userIdx", userIdx)
        edit.apply()
    }
    fun loginFailure(){
        val edit = ApplicationClass.sSharedPreferences.edit()
        edit.putString(ApplicationClass.X_ACCESS_TOKEN, null)
        edit.putInt("userIdx", -1)
        edit.apply()
    }*/